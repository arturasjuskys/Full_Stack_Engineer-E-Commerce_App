/*
 * E-Commerce APP (REST API)
 * A basic API for working with the Swagger Tools.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ECommerceAppRestApi);
  }
}(this, function(expect, ECommerceAppRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ECommerceAppRestApi.OrdersApi();
  });

  describe('(package)', function() {
    describe('OrdersApi', function() {
      describe('ordersDeleteOne', function() {
        it('should call ordersDeleteOne successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersDeleteOne call
          /*

          instance.ordersDeleteOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersGetAll', function() {
        it('should call ordersGetAll successfully', function(done) {
          // TODO: uncomment ordersGetAll call
          /*

          instance.ordersGetAll(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersGetOne', function() {
        it('should call ordersGetOne successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersGetOne call
          /*

          instance.ordersGetOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersNew', function() {
        it('should call ordersNew successfully', function(done) {
          // TODO: uncomment ordersNew call
          /*

          instance.ordersNew(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ordersUpdateOne', function() {
        it('should call ordersUpdateOne successfully', function(done) {
          // TODO: uncomment, update parameter values for ordersUpdateOne call
          /*

          instance.ordersUpdateOne(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
